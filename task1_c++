#include <iostream>
#include <unordered_map>
#include <vector>
#include <algorithm>

using namespace std;

struct UserInfo {
    string display_name;
    string state;
    vector<string> friends;
};

struct PostInfo {
    string user_id;
    string visibility;
};

unordered_map<string, UserInfo> user_data;
unordered_map<string, PostInfo> post_data;

void initialize_data() {
    user_data["goldenlover1"] = {"Jane Doe", "CA", {"petpal4ever", "whiskerwatcher"}};
    user_data["whiskerwatcher"] = {"John Doe", "NY", {"goldenlover1"}};
    user_data["petpal4ever"] = {"Great Name", "WV", {"goldenlover1"}};

    post_data["post1112"] = {"goldenlover1", "friend"};
    post_data["post2123"] = {"whiskerwatcher", "friend"};
    post_data["post3298"] = {"petpal4ever", "public"};
}

void load_user_info(string user_info_str) {
    string username, display_name, state, friends_list;
    int pos = 0;

    pos = user_info_str.find(';');
    username = user_info_str.substr(0, pos);
    user_info_str.erase(0, pos + 1);

    pos = user_info_str.find(';');
    display_name = user_info_str.substr(0, pos);
    user_info_str.erase(0, pos + 1);

    pos = user_info_str.find(';');
    state = user_info_str.substr(0, pos);
    user_info_str.erase(0, pos + 1);

    friends_list = user_info_str;

    UserInfo user_info;
    user_info.display_name = display_name;
    user_info.state = state;

    while ((pos = friends_list.find(',')) != string::npos) {
        user_info.friends.push_back(friends_list.substr(0, pos));
        friends_list.erase(0, pos + 1);
    }
    user_info.friends.push_back(friends_list);

    user_data[username] = user_info;
}

void load_post_info(string post_info_str) {
    string post_id, user_id, visibility;
    int pos = 0;

    pos = post_info_str.find(';');
    post_id = post_info_str.substr(0, pos);
    post_info_str.erase(0, pos + 1);

    pos = post_info_str.find(';');
    user_id = post_info_str.substr(0, pos);
    post_info_str.erase(0, pos + 1);

    visibility = post_info_str;

    PostInfo post_info;
    post_info.user_id = user_id;
    post_info.visibility = visibility;

    post_data[post_id] = post_info;
}

string check_visibility(string post_id, string username) {
    
    if (post_data.find(post_id) == post_data.end()) {
        return "Post ID not found";
    }

    PostInfo post_info = post_data[post_id];

    if (post_info.visibility == "public") {
        return "Access Permitted";
    } 
    
    else if (post_info.visibility == "friend") {
        if (find(user_data[post_info.user_id].friends.begin(), user_data[post_info.user_id].friends.end(), username) != user_data[post_info.user_id].friends.end()) {
            
            return "Access Permitted";
        }
        
        else {
            return "Access Denied";
        }
    }
    
    return "Unknown visibility type";
}

vector<string> retrieve_posts(string username) {
    vector<string> accessible_posts;
    
    for (pair<string, PostInfo> post : post_data) {
        if (post.second.user_id != username) {
            
            if (post.second.visibility == "public" || find(user_data[post.second.user_id].friends.begin(), user_data[post.second.user_id].friends.end(), username) != user_data[post.second.user_id].friends.end()) {
                
                accessible_posts.push_back(post.first);
            }
        }
    }
    
    return accessible_posts;
}

vector<string> search_users_by_location(string state) {
    vector<string> users_in_state;
    
    for (pair<string, UserInfo> user : user_data) {
        if (user.second.state == state) {
            users_in_state.push_back(user.second.display_name);
        }
    }
    
    return users_in_state;
}

int main() {
    
    initialize_data();
    
    cout << "Welcome to the Social Network Platform!" << endl;

    while (true) {
        cout << "\nMenu:" << endl;
        cout << "1. Load input data" << endl;
        cout << "2. Check visibility" << endl;
        cout << "3. Retrieve posts" << endl;
        cout << "4. Search users by location" << endl;
        cout << "5. Exit" << endl;

        int choice;
        cout << "\nEnter your choice: ";
        cin >> choice;

        switch (choice) {
            case 1: {
                string user_info_str, post_info_str;

                cout << "Enter user information: ";
                cin.ignore();
                getline(cin, user_info_str);

                cout << "Enter post information: ";
                getline(cin, post_info_str);

                load_user_info(user_info_str);
                load_post_info(post_info_str);

                cout << "Data loaded successfully!" << endl;
                break;
            }
                
            case 2: {
                string post_id, username;

                cout << "Enter the post ID: ";
                cin >> post_id;

                cout << "Enter your username: ";
                cin >> username;

                cout << check_visibility(post_id, username) << endl;
                break;
            }
                
            case 3: {
                string username;

                cout << "Enter your username: ";
                cin >> username;

                vector<string> posts = retrieve_posts(username);

                cout << "Accessible posts:" << endl;

                for (string post : posts) {
                    cout << post << endl;
                }
                
                break;
            }
                
            case 4: {
                string state;

                cout << "Enter the state location: ";
                cin >> state;

                vector<string> users = search_users_by_location(state);

                cout << "Users in " << state << ":" << endl;

                for (string user : users) {
                    cout << user << endl;
                }

                break;
            }
                
            case 5:
                cout << "Exiting the program. Goodbye!" << endl;
                return 0;
                
            default:
                cout << "Invalid choice. Please try again." << endl;
        }
    }

    return 0;
}
